import Head from "next/head";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";

import { SignInButton, useUser } from "@clerk/nextjs";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import LoadSpinner from "~/components/LoadSpinner";
import { useState } from "react";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.post.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.post.getAll.invalidate();
    },
  });

  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <Image
        className="rounded-full"
        src={user.profileImageUrl}
        alt="Profile Image"
        width={55}
        height={55}
      />
      <input
        type="text"
        placeholder="Type some post"
        className="grow bg-transparent outline-none"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        disabled={isPosting}
      />
      <button
        onClick={() =>
          mutate({ userName: user.username ?? "User", content: input })
        }
      >
        Post
      </button>
    </div>
  );
};

type PostWithUserT = RouterOutputs["post"]["getAll"][number];

const PostItem = ({ post, author }: PostWithUserT) => {
  return (
    <div className="flex gap-3 border-b border-slate-400 p-4">
      <Image
        src={author.profileImageUrl}
        className="rounded-full"
        alt={`${author.username} Profile Image`}
        width={55}
        height={55}
      />
      <div className="flex flex-col">
        <div className="flex gap-1 text-slate-300">
          <span>{`@${author.username}`}</span>
          <span>{`${dayjs(post.createdAt).fromNow()}`}</span>
        </div>
        <span className="text-xl">{post.content}</span>
      </div>
    </div>
  );
};

const Posts = () => {
  const { data, isLoading: postIsLoading } = api.post.getAll.useQuery();

  if (postIsLoading) return <LoadSpinner />;

  if (!data) return <div>Something wrong</div>;

  return (
    <div className="flex flex-col">
      {data?.map((postData) => (
        <PostItem {...postData} key={postData.post.id} />
      ))}
    </div>
  );
};

export default function Home() {
  const { isLoaded: userIsLoaded, isSignedIn } = useUser();

  // Start fetch (use the cache)
  api.post.getAll.useQuery();

  // Return empty div if user not loaded
  if (!userIsLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen justify-center">
        <div className="w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex justify-center border-b border-slate-400 p-4">
            {!isSignedIn && (
              <SignInButton>
                <button>Sign in with Clerk</button>
              </SignInButton>
            )}
            {!!isSignedIn && (
              <>
                <CreatePostWizard />
                {/* <SignOutButton>
                  <button>Sign out with Clerk</button>
                </SignOutButton> */}
              </>
            )}
          </div>
          <div>
            <Posts />
          </div>
        </div>
      </main>
    </>
  );
}
